'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function () {

  var self = this;
  var debounceValue = this.opts.debounce;
  var theme = themes['bootstrap3'];

  var search = this.source == 'client' ? this.search.bind(this) : this.serverSearch.bind(this);

  return this.$scopedSlots.default({
    source: this.soruce,
    query: this.query,
    theme: theme,
    display: this.display,
    hasTopContent: true, //this.hasTopContent,
    tableClasses: this.opts.skin ? this.opts.skin : theme.table,
    perpageProps: {
      name: "limit",
      value: this.limit,
      id: 'VueTables__limit_' + this.id
    },
    perpageEvents: {
      change: this.setLimit
    },
    perpageOptionProps: function perpageOptionProps(value) {
      return {
        value: value
      };
    },

    perpageValues: this.opts.perPageValues,
    paginationProps: {
      ref: 'pagination',
      options: {
        theme: 'bootstrap3',
        chunk: this.opts.pagination.chunk,
        chunksNavigation: this.opts.pagination.nav,
        edgeNavigation: this.opts.pagination.edge,
        texts: {
          count: this.opts.texts.count,
          first: this.opts.texts.first,
          last: this.opts.texts.last
        }
      },
      for: this.name,
      vuex: this.vuex,
      records: this.count,
      perPage: parseInt(this.limit)
    },
    paginationEvents: {
      paginate: function paginate(page) {
        self._onPagination(page);
      }
    },
    hasDropdownPagination: this.opts.pagination.dropdown,
    dropdownPaginationProps: this.dropdownPaginationProps,
    dropdownPaginationEvents: this.dropdownPaginationEvents,
    dropdownPainationOptionProps: this.dropdownPainationOptionProps,
    columnFilters: this.columnFilters,
    rows: this.filteredData,
    columns: this.allColumns,
    hasGenericFilter: this.hasGenericFilter,
    hasColumnsDropdown: this.opts.columnsDropdown,
    genericFilterProps: {
      type: "text",
      value: this.query,
      placeholder: this.display('filterPlaceholder'),
      id: this.name
    },
    genericFilterEvents: {
      keyup: (0, _debounce2.default)(search, this.opts.debounce)
    },
    tableName: this.name,
    isTextFilter: this.isTextFilter,
    isDateFilter: this.isDateFilter,
    isListFilter: this.isListFilter,
    heading: function heading(column) {
      return self.getHeading(column);
    },
    thProps: function thProps(column) {
      return {
        class: self.sortableClass(column)
      };
    },
    thEvents: function thEvents(column) {
      return {
        click: function click(e) {
          self.orderByColumn(column, e);
        }
      };
    },
    thSpanProps: function thSpanProps(column) {
      return {
        title: self.getHeadingTooltip(column)
      };
    },
    chevronProps: function chevronProps(column) {
      var classes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'VueTables__sort-icon ' + theme.right;

      return {
        class: classes + ' ' + self.sortableChevronClass(column)
      };
    },

    hasChildRow: this.hasChildRow,
    hasColumnFilters: this.opts.filterByColumn && this.opts.filterable,
    columnClass: this.columnClass,
    filterWrapperClasses: function filterWrapperClasses(column) {
      return 'VueTables__column-filter VueTables__' + column + '-filter-wrapper';
    },
    textFilterProps: function textFilterProps(column) {
      return {
        placeholder: self.display('filterBy', { column: self.getHeading(column) }),
        value: self.query[column],
        name: self._getColumnName(column)
      };
    },
    textFilterEvents: function textFilterEvents(column) {
      return {
        keyup: (0, _debounce2.default)(search, debounceValue)
      };
    },
    listFilterProps: function listFilterProps(column) {
      return {
        name: self._getColumnName(column),
        value: self.query[column]
      };
    },
    listFilterEvents: function listFilterEvents(column) {
      return {
        change: search
      };
    },
    listFilterDefault: function listFilterDefault(column) {
      return self.display('defaultOption', { column: self.opts.headings[column] ? self.opts.headings[column] : column });
    },
    getList: function getList(column) {
      return self.opts.listColumns[column].filter(function (item) {
        return !item.hide;
      });
    },
    dateFilterPlaceholder: function dateFilterPlaceholder(column) {
      return self.display('filterBy', { column: self.getHeading(column) });
    }
  });
};

var _debounce = require('debounce');

var _debounce2 = _interopRequireDefault(_debounce);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var themes = {
  bootstrap3: require('../themes/bootstrap3')(),
  bootstrap4: require('../themes/bootstrap4')(),
  bulma: require('../themes/bulma')()
};